- commit規範
    
    書寫方式:  [分類] 詳細說明
    
    分類如下
    
    - style: 格式 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, etc)。
        - 針對所有被壓縮的程式碼做 Beautifier
        - 移除被註解的程式碼，原本被註解的程式碼應該是壓縮前的程式碼，但是經測試後發現這些被註解的程式碼都是舊 Code，故移除。
    - feat: 新增/修改/刪除功能 (feature)
        - mail_template.php，新增 message 區塊。
        - Message_model_api.php，新增 $where 參數，以便取得每日訊息。
        - Assessment_form.php，匯出表單統計時，新增訓練計畫名欄位。
        - 初始化 unload 事件處理器：排除新增表單時，頁面自動建立空白題組調用 sort_item 的情境
    - fix: 修補 bug (bug fix)。
    - refactor: 重構 (功能轉移、既不是新增功能，也不是修補 bug 的程式碼變動)。
        - Workflow_api.php，get_process_name() 方法是為了取得流程名稱，現在以 Process:: get_type_name() 取代，故刪除
        - 其他檔案：改用 Process:: get_type_name() 取得流程名稱。
        - 把取得「系統通知」邏輯搬移至 System_notify_handler.php
        - 將「系統通知」與「站內訊息」的 Email 頁面獨立出來。
    - chore: 建構程序或輔助工具的變動 (maintain)。
        - 版本更新
        - Bootstrap.php，引入 AdminTestCase.php 共測試案例繼承用。
        - 加入 tests/unit 與 tests/integration 目錄，並將測試檔案移至合宜的位置。
        - Login.php，因測試案例中不能有 header 的設定，更動系統登入邏輯，在測試環境中改用 redirect 轉址。
    - revert: 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。
    - docs: 文件 (documentation)。
        - 新增註解
        - 移除過期的註解
    - perf: 改善效能 (A code change that improves performance)。
        - 原程式碼每個表單迴圈進入 DB 取得受評者資料。改成進 DB 一次撈取全部受評者資料，再回到 PHP 分配資料
    - test: 增加測試 (when adding missing tests)。
    - data: 增加圖片、excel檔等文件

url,homepage到時候專案建好要改package jason

終端機terminal > Git bash
終端機cls畫面雜亂指令清除

origin #本地數據庫

start a working area (see also: git help tutorial)
$ git clone <url> #複製遠端數據庫的專案下載到本地 Clone a repository into a new directory
$ git init #在本地端建立數據庫 Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
$ git add . #將本地端數據庫「全部」推送至暫存區 Add file contents to the index

grow, mark and tweak your common history
$ git branch <branch> #建立分支 List, create, or delete branches
$ git commit -m "註解" #送到暫存區並加上註解 Record changes to the repository
$ git merge <branch>  讓所在分支抓到指定分支上更新的commit/Join two or more development histories together
rebase    Reapply commits on top of another base tip
$ git reset --hard HEAD~1 #數字表示移動到HEAD後面第幾個（在這個模式下，不管是工作目錄以及暫存區的檔案都會丟掉。）Reset current HEAD to the specified state
$ git reset --soft HEAD~1 #數字表示移動到HEAD後面第幾個（這個模式下的reset，工作目錄跟暫存區的檔案都不會被丟掉，所以看起來就只有HEAD的移動而已。也因此，Commit拆出來的檔案會直接放在暫存區。）
switch    Switch branches

collaborate (see also: git help workflows)
fetch     Download objects and refs from another repository
$ git pull <remote> <branch> #下載同步更新
$ git push <origin> <branch> #本地資料推送更新到遠端數據庫

pull 不要用reset, 要用revert
push 用reset
$ git remote add <url> #在本地數據庫上添加遠端數據庫的網址
$ git remote #查看遠端數據庫列表
$ git remote -v #查看遠端數據庫列表（包含網址）
$ git log  查看commit 狀態
$ git checkout <branch> #將所在分支 (head) 移動到指定分支
$ git checkout HEAD~1 #數字表示移動到HEAD後面第幾個（把目前的HEAD移到指定的commit上，並且把目前的狀態變成當時commit的樣子，但是不會移動任何分支（也就是分支都停在原來的地方，只有 HEAD 移動而已）。因此，整個歷史紀錄看起來並沒有什麼變化，只是HEAD暫時移到某個地方而已。）
$ git checkout -b <branch>  在checkout 的分支上建立新分支
__________________________________________________
開專案repository（create a new repository [owner master ] public）
分享專案（Settings > Collaborators > Add people）
branch dev（）
dev pull master（讓組員能看見遠端分支）

Settings Pages（發布分享網址）
settings > branches可以調整預設分支
master merge dev
專案上線git push master
md檔換行兩個空格


RWD
img max-width
table overflow:auto;(比較好，放大卷軸會消失) | overflow:scroll(放大卷軸依舊存在)

用系統管理員開vscode沒有壓縮開發用壓縮上線用

有的按鈕不會觸發鍵盤事件

sql 布林值設bit1/烏鴉腳一對多

小遊戲用亂數洗順序

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.0.0/css/all.css" 
integrity="sha384-3B6NwesSXE7YJlcLI9RpRqGf2p/EgVH8BgoKTaUrmKNDkHPStTQ3EyoYjCGXaOTS" 
crossorigin="anonymous">

// $Tr: transparent; // 透明
// $Opacity: 1; // 透明度

// text-orientation 文字排列方向
// font-style, font-variant, font-weight, font-stretch, font-size, line-height, and font-family
// font: italic normal bold normal 3em/1.5 Helvetica, Arial, sans-serif;

// $TextAlign: justify;  // 文字間距自動計算占滿寬度

// 滑鼠游標
// $Cursor: pointer;